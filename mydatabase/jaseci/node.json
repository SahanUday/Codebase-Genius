[
{"_id": {"$oid": "000000000000000000000000"}, "name": "", "root": null, "access": {"all": "NO_ACCESS", "roots": {"anchors": {}}}, "archetype": {}, "edges": []},
{"_id": {"$oid": "68b2f39fabec8b06b95a21bd"}, "name": "DocGenie", "root": {"$oid": "000000000000000000000001"}, "access": {"all": "NO_ACCESS", "roots": {"anchors": {}}}, "archetype": {"saved_repo_url": "https://github.com/SahanUday/Airvix-App.git", "drafted_chapters": [{"heading": "Centralized AC Control & Data Management with Firebase", "highlevel_explanation_section": "This chapter introduces the FirebaseACService, a critical component designed to centralize all interactions with the Firebase Realtime Database for AC control. It abstracts away direct database calls from various UI components, providing a single, consistent interface for sending AC commands, fetching real-time sensor data, and managing complex settings like geofencing parameters, scheduling configurations, and user feedback. This approach ensures data integrity, simplifies maintenance, and promotes code reusability across the application.", "key_concepts": "Firebase Realtime Database integration, Centralized data access and modification logic, AC command dispatch, Real-time sensor data retrieval, Geofencing and scheduling parameter management, User feedback handling.", "mermaid_diagram_section": "graph TD\n    UserInterface --> FirebaseACService\n    FirebaseACService --> FirebaseRTDB\n    FirebaseRTDB --> FirebaseACService\n    FirebaseACService -- Manages --> GeofencingSettings\n    FirebaseACService -- Manages --> SchedulingParameters\n    FirebaseACService -- Manages --> ACControlCommands\n    FirebaseACService -- Fetches --> SensorData", "conclusion": "The FirebaseACService serves as the backbone for AC control and data management, ensuring all interactions with Firebase are streamlined and consistent, thereby enhancing the application's reliability and scalability."}, {"heading": "Geofence Management and Location Services", "highlevel_explanation_section": "This chapter details the LocationMonitoringService, which encapsulates all logic related to location services and geofencing. It handles crucial tasks such as requesting and checking location permissions, initiating and managing continuous location updates, and performing geofence calculations (e.g., distance checks to a target location). By centralizing these functionalities, the service effectively manages the underlying 'geolocator' package and broadcasts notifications about location changes or geofence entry/exit events to relevant parts of the application.", "key_concepts": "Location permission management, Continuous location updates, Geolocator package integration, Geofence distance calculation, Entry/Exit event detection and notification.", "mermaid_diagram_section": "graph TD\n    GeofencingPage --> LocationMonitoringService\n    LocationMonitoringService -- Requests --> LocationPermissions\n    LocationMonitoringService -- Uses --> GeolocatorPackage\n    GeolocatorPackage -- Provides --> RawLocationData\n    LocationMonitoringService -- Performs --> GeofenceCalculations\n    LocationMonitoringService -- Notifies --> GeofencingPage", "conclusion": "The LocationMonitoringService provides robust and reliable location-based functionalities, making it possible to implement intelligent geofencing features for automated AC control with minimal effort."}, {"heading": "Consistent User Notifications with Toast Messenger", "highlevel_explanation_section": "This chapter describes the AppToastMessenger, a utility class designed to provide a consistent and centralized mechanism for displaying toast notifications throughout the application. By using 'Fluttertoast' through this abstraction, the app ensures that all user feedback messages (e.g., success, error, information) maintain a uniform styling, duration, and gravity. This approach eliminates code duplication, improves user experience, and simplifies future modifications to notification aesthetics.", "key_concepts": "Fluttertoast package utilization, Centralized notification logic, Consistent UI feedback, Uniform styling and positioning for toasts, Code reusability in UI components.", "mermaid_diagram_section": "graph TD\n    HomeScreen --> AppToastMessenger\n    GeofencingPage --> AppToastMessenger\n    SchedulerPage --> AppToastMessenger\n    SmartControlPage --> AppToastMessenger\n    AppToastMessenger -- Uses --> FluttertoastPackage", "conclusion": "The AppToastMessenger is vital for maintaining a professional and consistent user experience by standardizing how toast notifications are displayed across the entire application."}, {"heading": "Standardized Data Formatting Utilities", "highlevel_explanation_section": "This chapter focuses on a collection of static utility methods dedicated to consistently formatting various data types. Specifically, it provides functions for converting raw date, time, and double values (such as temperatures and humidity readings) into user-friendly string representations. This utility is crucial for eliminating code duplication across different widgets and pages, ensuring that all displayed numerical and temporal data adhere to a uniform, readable format.", "key_concepts": "Static utility methods, Date and time formatting (using DateFormat), Double value formatting (e.g., to one decimal place), Code reusability, Data presentation consistency.", "mermaid_diagram_section": "graph TD\n    HomeScreen --> DataFormattingUtils\n    SmartControlPage --> DataFormattingUtils\n    DataFormattingUtils -- Formats --> Dates\n    DataFormattingUtils -- Formats --> Times\n    DataFormattingUtils -- Formats --> DoubleValues", "conclusion": "DataFormattingUtils is essential for maintaining a clean and professional user interface by providing standardized formatting for all numerical and temporal data, reducing redundancy and improving readability."}, {"heading": "Reusable Feature Toggle Widget for AC Control", "highlevel_explanation_section": "This chapter introduces the ACFeatureToggleCard, a highly reusable Flutter widget designed to present various feature toggles within the application. It provides a consistent UI for enabling or disabling features like Geofencing, Smart AC Control, Occupancy Auto-ON/Off, or Schedule Enable. Typically, it comprises a styled 'Container' wrapping a 'SwitchListTile', offering a clear title, a descriptive subtitle, and an interactive switch. This modular design promotes UI consistency and simplifies the development of new feature control panels.", "key_concepts": "Flutter widget reusability, Consistent UI for feature toggles, SwitchListTile integration, Styled Container for visual presentation, Modular UI design.", "mermaid_diagram_section": "graph TD\n    GeofencingPage -- Uses --> ACFeatureToggleCard\n    SmartControlPage -- Uses --> ACFeatureToggleCard\n    SchedulerPage -- Uses --> ACFeatureToggleCard\n    ACFeatureToggleCard -- Contains --> SwitchListTile\n    ACFeatureToggleCard -- Provides --> FeatureToggleUI", "conclusion": "The ACFeatureToggleCard streamlines the implementation of feature toggles, ensuring a consistent and user-friendly experience across all smart AC control functionalities."}, {"heading": "Real-time Sensor Data Visualization Widget", "highlevel_explanation_section": "This chapter details the SensorDataDisplayWidget, a specialized Flutter widget crafted for presenting real-time environmental sensor data. It provides a structured and consistent layout for visualizing crucial information such as indoor/outdoor temperature, humidity levels, current weather conditions, and occupancy status. By centralizing the display logic for sensor data, this widget ensures that users receive clear, up-to-date environmental insights in a visually organized manner across different application screens.", "key_concepts": "Flutter widget for data visualization, Real-time sensor data display, Consistent layout for environmental metrics, Indoor/outdoor temperature and humidity, Weather conditions, Occupancy status.", "mermaid_diagram_section": "graph TD\n    FirebaseACService -- Provides --> SensorData\n    HomeScreen -- Displays --> SensorDataDisplayWidget\n    SmartControlPage -- Displays --> SensorDataDisplayWidget\n    SensorDataDisplayWidget -- Visualizes --> IndoorTemp\n    SensorDataDisplayWidget -- Visualizes --> IndoorHumidity\n    SensorDataDisplayWidget -- Visualizes --> OutdoorTemp\n    SensorDataDisplayWidget -- Visualizes --> OutdoorHumidity\n    SensorDataDisplayWidget -- Visualizes --> Weather\n    SensorDataDisplayWidget -- Visualizes --> Occupancy", "conclusion": "The SensorDataDisplayWidget is crucial for effectively communicating real-time environmental data to the user, providing a consistent and clear overview of the immediate surroundings relevant to AC control."}], "overview": "# Project Overview: Smart AC Control Application", "chapters": [{"id": "o:Chapter:68b2f3d7abec8b06b95a21bf", "context": {"title": "Centralized AC Control & Data Management with Firebase", "content": "Welcome to the core of our smart AC system! In this chapter, we'll explore the FirebaseACService. Think of this as the central brain that talks directly to our Firebase Realtime Database. Its main job is to keep all our AC controls, sensor data, and smart settings (like geofencing and schedules) organized and easy to manage. Instead of different parts of our app trying to talk to the database directly, everything goes through this one service. This makes our app more reliable, easier to update, and ensures all data is handled correctly.\n\n### Key Concepts You'll Learn:\n\n*   Firebase Realtime Database integration\n*   Centralized data access and modification logic\n*   AC command dispatch\n*   Real-time sensor data retrieval\n*   Geofencing and scheduling parameter management\n*   User feedback handling.\n\nLet's look at how this service connects everything together:\n\n```mermaid\ngraph TD\n    UserInterface --> FirebaseACService\n    FirebaseACService --> FirebaseRTDB\n    FirebaseRTDB --> FirebaseACService\n    FirebaseACService -- Manages --> GeofencingSettings\n    FirebaseACService -- Manages --> SchedulingParameters\n    FirebaseACService -- Manages --> ACControlCommands\n    FirebaseACService -- Fetches --> SensorData\n```\n\nIn essence, the FirebaseACService is the backbone for AC control and data management. It makes sure all interactions with Firebase are streamlined and consistent, thereby enhancing the application's reliability and scalability."}}, {"id": "o:Chapter:68b2f3d7abec8b06b95a21c0", "context": {"title": "Geofence Management and Location Services", "content": "Imagine your AC turning on automatically when you're almost home! This chapter dives into how we make that happen with the LocationMonitoringService. This service is like the app's personal guide, handling all things related to your location. It takes care of asking for your permission to use your location, constantly checking where you are, and figuring out if you've entered or left a specific area (a 'geofence'). By putting all these location tasks in one place, we can easily use powerful tools like the 'geolocator' package and send out alerts when your location changes or you cross a geofence.\n\n### Key Concepts You'll Learn:\n\n*   Location permission management\n*   Continuous location updates\n*   Geolocator package integration\n*   Geofence distance calculation\n*   Entry/Exit event detection and notification.\n\nHere's a simple diagram showing how our geofencing system works:\n\n```mermaid\ngraph TD\n    GeofencingPage --> LocationMonitoringService\n    LocationMonitoringService -- Requests --> LocationPermissions\n    LocationMonitoringService -- Uses --> GeolocatorPackage\n    GeolocatorPackage -- Provides --> RawLocationData\n    LocationMonitoringService -- Performs --> GeofenceCalculations\n    LocationMonitoringService -- Notifies --> GeofencingPage\n```\n\nThe LocationMonitoringService provides robust and reliable location-based functionalities, making it possible to implement intelligent geofencing features for automated AC control with minimal effort."}}, {"id": "o:Chapter:68b2f3d7abec8b06b95a21c1", "context": {"title": "Consistent User Notifications with Toast Messenger", "content": "Have you ever noticed those small, temporary messages that pop up at the bottom of your screen to tell you something happened? Those are called 'toasts'! In this chapter, we'll meet the AppToastMessenger. This helpful tool makes sure that every time our app needs to show you a message \u2013 whether it's a success, an error, or just some info \u2013 it looks and feels exactly the same. By using the 'Fluttertoast' package through our AppToastMessenger, we avoid repeating code and guarantee a smooth, professional look for all our notifications. This means a better experience for you!\n\n### Key Concepts You'll Learn:\n\n*   Fluttertoast package utilization\n*   Centralized notification logic\n*   Consistent UI feedback\n*   Uniform styling and positioning for toasts\n*   Code reusability in UI components.\n\nLet's see how different parts of our app use the AppToastMessenger:\n\n```mermaid\ngraph TD\n    HomeScreen --> AppToastMessenger\n    GeofencingPage --> AppToastMessenger\n    SchedulerPage --> AppToastMessenger\n    SmartControlPage --> AppToastMessenger\n    AppToastMessenger -- Uses --> FluttertoastPackage\n```\n\nThe AppToastMessenger is vital for maintaining a professional and consistent user experience by standardizing how toast notifications are displayed across the entire application."}}, {"id": "o:Chapter:68b2f3d7abec8b06b95a21c2", "context": {"title": "Standardized Data Formatting Utilities", "content": "Imagine seeing dates, times, or temperatures displayed differently across various parts of an app \u2013 it would be confusing! This chapter introduces the DataFormattingUtils, a collection of handy tools that make sure all our numbers and dates look neat and consistent. These tools help us convert raw data, like a complex date or a temperature reading, into something easy for you to read, like 'Jan 15, 2023' or '72.5\u00b0F'. By using these utilities, we avoid writing the same formatting code over and over, making our app's display clear and uniform everywhere.\n\n### Key Concepts You'll Learn:\n\n*   Static utility methods\n*   Date and time formatting (using DateFormat)\n*   Double value formatting (e.g., to one decimal place)\n*   Code reusability\n*   Data presentation consistency.\n\nHere's a quick look at how DataFormattingUtils helps various screens:\n\n```mermaid\ngraph TD\n    HomeScreen --> DataFormattingUtils\n    SmartControlPage --> DataFormattingUtils\n    DataFormattingUtils -- Formats --> Dates\n    DataFormattingUtils -- Formats --> Times\n    DataFormattingUtils -- Formats --> DoubleValues\n```\n\nDataFormattingUtils is essential for maintaining a clean and professional user interface by providing standardized formatting for all numerical and temporal data, reducing redundancy and improving readability."}}, {"id": "o:Chapter:68b2f3d7abec8b06b95a21c3", "context": {"title": "Reusable Feature Toggle Widget for AC Control", "content": "When you open your app, you'll often see switches or toggles to turn features on or off, like 'Geofencing' or 'Smart AC Control'. This chapter introduces a special building block called the ACFeatureToggleCard. It's a smart Flutter widget designed to give all these 'on/off' switches a consistent look and feel. Each card typically has a clear title, a short description, and an interactive switch. By using this modular design, we make sure that all our feature controls look the same, making the app easier to use and new features simpler to add.\n\n### Key Concepts You'll Learn:\n\n*   Flutter widget reusability\n*   Consistent UI for feature toggles\n*   SwitchListTile integration\n*   Styled Container for visual presentation\n*   Modular UI design.\n\nThis diagram shows where the ACFeatureToggleCard is used and what it contains:\n\n```mermaid\ngraph TD\n    GeofencingPage -- Uses --> ACFeatureToggleCard\n    SmartControlPage -- Uses --> ACFeatureToggleCard\n    SchedulerPage -- Uses --> ACFeatureToggleCard\n    ACFeatureToggleCard -- Contains --> SwitchListTile\n    ACFeatureToggleCard -- Provides --> FeatureToggleUI\n```\n\nThe ACFeatureToggleCard streamlines the implementation of feature toggles, ensuring a consistent and user-friendly experience across all smart AC control functionalities."}}, {"id": "o:Chapter:68b2f3d7abec8b06b95a21c4", "context": {"title": "Real-time Sensor Data Visualization Widget", "content": "What's the temperature inside? How about outside? This chapter introduces the SensorDataDisplayWidget, a special Flutter widget built to show you all this important environmental data in real-time. It's designed to present information like indoor/outdoor temperature, humidity, current weather, and if someone is detected in the room, in a clear and organized way. By centralizing how we display this sensor data, we ensure you always get easy-to-understand, up-to-the-minute insights about your surroundings, right where you need them in the app.\n\n### Key Concepts You'll Learn:\n\n*   Flutter widget for data visualization\n*   Real-time sensor data display\n*   Consistent layout for environmental metrics\n*   Indoor/outdoor temperature and humidity\n*   Weather conditions\n*   Occupancy status.\n\nHere's a visual representation of how sensor data flows and is displayed:\n\n```mermaid\ngraph TD\n    FirebaseACService -- Provides --> SensorData\n    HomeScreen -- Displays --> SensorDataDisplayWidget\n    SmartControlPage -- Displays --> SensorDataDisplayWidget\n    SensorDataDisplayWidget -- Visualizes --> IndoorTemp\n    SensorDataDisplayWidget -- Visualizes --> IndoorHumidity\n    SensorDataDisplayWidget -- Visualizes --> OutdoorTemp\n    SensorDataDisplayWidget -- Visualizes --> OutdoorHumidity\n    SensorDataDisplayWidget -- Visualizes --> Weather\n    SensorDataDisplayWidget -- Visualizes --> Occupancy\n```\n\nThe SensorDataDisplayWidget is crucial for effectively communicating real-time environmental data to the user, providing a consistent and clear overview of the immediate surroundings relevant to AC control."}}], "diagrams": []}, "edges": ["e::68b2f39fabec8b06b95a21be"]},
{"_id": {"$oid": "68b2f368abec8b06b95a21bb"}, "name": "CodeAnalyzer", "root": {"$oid": "000000000000000000000001"}, "access": {"all": "NO_ACCESS", "roots": {"anchors": {}}}, "archetype": {"code_base": {"main_dart": ["import 'package:firebase_database/firebase_database.dart';\nimport 'package:flutter/material.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart'; // generated by Firebase CLI\nimport 'screens/login_screen.dart'; // your custom login screen\nimport 'screens/home_screen.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n\n  // Configure Firebase Database with the correct region URL (only here)\n  FirebaseDatabase.instance.databaseURL =\n      'https://airvix-ef027-default-rtdb.asia-southeast1.firebasedatabase.app/';\n\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Login Demo',\n      theme: ThemeData.dark(),\n      initialRoute: '/',\n      routes: {\n        '/': (context) => const LoginScreen(),\n        '/home': (context) => const HomePage(),\n      },\n    );\n  }\n}\n"], "geofencing_page_dart": ["import 'package:flutter/material.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_database/firebase_database.dart';\nimport 'package:geolocator/geolocator.dart';\nimport 'dart:async';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nclass GeofencingPage extends StatefulWidget {\n  const GeofencingPage({super.key});\n\n  @override\n  State<GeofencingPage> createState() => _GeofencingPageState();\n}\n\nclass _GeofencingPageState extends State<GeofencingPage> {\n  final dbRef =\n      FirebaseDatabase.instanceFor(\n        app: Firebase.app(),\n        databaseURL:\n            'https://airvix-ef027-default-rtdb.asia-southeast1.firebasedatabase.app/',\n      ).ref();\n\n  bool geofencingEnabled = false;\n  String currentStatus = \"Unknown\";\n  String entryAction = \"AC_ON\";\n  String exitAction = \"AC_OFF\";\n\n  double targetLat = 6.796675;\n  double targetLng = 79.899982;\n  double radiusMeters = 7;\n\n  bool wasInside = false;\n  Stream<Position>? positionStream;\n  StreamSubscription<Position>? positionSubscription;\n\n  final List<String> actionOptions = [\"AC_ON\", \"AC_OFF\", \"cool_24\", \"cool_20\"];\n\n  @override\n  void initState() {\n    super.initState();\n    _checkPermission();\n  }\n\n  @override\n  void dispose() {\n    positionSubscription?.cancel();\n    super.dispose();\n  }\n\n  Future<void> _checkPermission() async {\n    LocationPermission permission = await Geolocator.checkPermission();\n    if (permission == LocationPermission.denied) {\n      permission = await Geolocator.requestPermission();\n    }\n\n    if (permission == LocationPermission.deniedForever) {\n      _showNotification(\"Location permission permanently denied.\");\n    }\n\n    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();\n    if (!serviceEnabled) {\n      _showNotification(\"Location services are disabled.\");\n    }\n  }\n\n  void _toggleGeofencing(bool value) async {\n    setState(() {\n      geofencingEnabled = value;\n    });\n\n    if (value) {\n      _startLocationMonitoring();\n      _showNotification(\"Geofencing Enabled\");\n    } else {\n      _stopLocationMonitoring();\n      _showNotification(\"Geofencing Disabled\");\n    }\n  }\n\n  void _startLocationMonitoring() {\n    positionSubscription = Geolocator.getPositionStream(\n      locationSettings: const LocationSettings(\n        accuracy: LocationAccuracy.high,\n        distanceFilter: 1,\n      ),\n    ).listen((Position position) {\n      final double distance = Geolocator.distanceBetween(\n        position.latitude,\n        position.longitude,\n        targetLat,\n        targetLng,\n      );\n\n      final bool isInside = distance <= radiusMeters;\n\n      if (!wasInside && isInside) {\n        _sendCommand(entryAction);\n        _showNotification(\"Entered Home: $entryAction\");\n        setState(() => currentStatus = \"Home\");\n      } else if (wasInside && !isInside) {\n        _sendCommand(exitAction);\n        _showNotification(\"Exited Home: $exitAction\");\n        setState(() => currentStatus = \"Away\");\n      }\n\n      wasInside = isInside;\n    });\n  }\n\n  void _stopLocationMonitoring() {\n    positionSubscription?.cancel();\n    positionSubscription = null;\n  }\n\n  Future<void> _sendCommand(String action) async {\n    try {\n      await dbRef.child(\"ac_control/current_command\").set(action);\n    } catch (e) {\n      _showNotification(\"Failed to send command: $e\");\n    }\n  }\n\n  void _showEditAreaDialog() {\n    final latController = TextEditingController(text: targetLat.toString());\n    final lngController = TextEditingController(text: targetLng.toString());\n    final radiusController = TextEditingController(\n      text: radiusMeters.toString(),\n    );\n\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          backgroundColor: Colors.grey[900],\n          title: Text(\n            \"Edit Geofence Area\",\n            style: TextStyle(\n              color: Colors.blue,\n              fontSize: 24,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          content: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              TextField(\n                controller: latController,\n                keyboardType: TextInputType.number,\n                decoration: InputDecoration(labelText: \"Latitude\"),\n                style: TextStyle(color: Colors.white),\n              ),\n              TextField(\n                controller: lngController,\n                keyboardType: TextInputType.number,\n                decoration: InputDecoration(labelText: \"Longitude\"),\n                style: TextStyle(color: Colors.white),\n              ),\n              TextField(\n                controller: radiusController,\n                keyboardType: TextInputType.number,\n                decoration: InputDecoration(labelText: \"Radius (m)\"),\n                style: TextStyle(color: Colors.white),\n              ),\n            ],\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: Text(\"Cancel\", style: TextStyle(color: Colors.blue)),\n            ),\n            TextButton(\n              onPressed: () async {\n                setState(() {\n                  targetLat = double.tryParse(latController.text) ?? targetLat;\n                  targetLng = double.tryParse(lngController.text) ?? targetLng;\n                  radiusMeters =\n                      double.tryParse(radiusController.text) ?? radiusMeters;\n                });\n                Navigator.pop(context);\n                _showNotification(\"Geofence area updated\");\n              },\n              child: Text(\"Save\", style: TextStyle(color: Colors.blue)),\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  void _showNotification(String msg) {\n    Fluttertoast.showToast(\n      msg: msg,\n      toastLength: Toast.LENGTH_SHORT,\n      gravity: ToastGravity.BOTTOM,\n      backgroundColor: Colors.black87,\n      textColor: Colors.white,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(\n        title: Text(\n          \"Geofencing Control\",\n          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 28),\n        ),\n        centerTitle: true,\n        backgroundColor: Colors.black,\n      ),\n      body: SafeArea(\n        child: SingleChildScrollView(\n          padding: EdgeInsets.all(16),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Container(\n                padding: EdgeInsets.all(30),\n                decoration: BoxDecoration(\n                  color: Colors.grey[900],\n                  borderRadius: BorderRadius.circular(16),\n                ),\n                child: Column(\n                  children: [\n                    SwitchListTile(\n                      title: Text(\n                        \"Geofencing\",\n                        style: TextStyle(\n                          fontSize: 20,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.white,\n                        ),\n                      ),\n                      subtitle: Text(\n                        \"Automatically control AC based on your location.\",\n                        style: TextStyle(color: Colors.white70),\n                      ),\n                      value: geofencingEnabled,\n                      onChanged: _toggleGeofencing,\n                      activeColor: Colors.blue,\n                      contentPadding: EdgeInsets.zero,\n                    ),\n                    SizedBox(height: 16),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Current Status: ${currentStatus == \"Home\" ? \"\ud83d\udfe2 Home\" : \"\ud83d\udd34 Away\"}\",\n                          style: TextStyle(\n                            fontSize: 18,\n                            color: Colors.white,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                        ElevatedButton(\n                          onPressed: _showEditAreaDialog,\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.blue,\n                            shape: RoundedRectangleBorder(\n                              borderRadius: BorderRadius.circular(8),\n                            ),\n                          ),\n                          child: Text(\n                            \"Edit Area\",\n                            style: TextStyle(color: Colors.white),\n                          ),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              SizedBox(height: 20),\n              Container(\n                padding: EdgeInsets.all(30),\n                decoration: BoxDecoration(\n                  color: Colors.grey[900],\n                  borderRadius: BorderRadius.circular(16),\n                ),\n                child: Column(\n                  children: [\n                    Align(\n                      alignment: Alignment.centerLeft,\n                      child: Text(\n                        \"Entry & Exit Actions\",\n                        style: TextStyle(\n                          fontSize: 20,\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    SizedBox(height: 12),\n                    DropdownButtonFormField<String>(\n                      value: entryAction,\n                      dropdownColor: Colors.grey[900],\n                      decoration: InputDecoration(\n                        labelText: 'When Entering \"Home\"',\n                      ),\n                      items:\n                          actionOptions.map((value) {\n                            return DropdownMenuItem<String>(\n                              value: value,\n                              child: Text(\n                                value,\n                                style: TextStyle(color: Colors.white),\n                              ),\n                            );\n                          }).toList(),\n                      onChanged: (val) => setState(() => entryAction = val!),\n                    ),\n                    SizedBox(height: 12),\n                    DropdownButtonFormField<String>(\n                      value: exitAction,\n                      dropdownColor: Colors.grey[900],\n                      decoration: InputDecoration(\n                        labelText: 'When Exiting \"Home\"',\n                      ),\n                      items:\n                          actionOptions.map((value) {\n                            return DropdownMenuItem<String>(\n                              value: value,\n                              child: Text(\n                                value,\n                                style: TextStyle(color: Colors.white),\n                              ),\n                            );\n                          }).toList(),\n                      onChanged: (val) => setState(() => exitAction = val!),\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"], "home_screen_dart": ["import 'package:flutter/material.dart';\nimport 'package:firebase_database/firebase_database.dart';\nimport 'package:intl/intl.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nimport 'geofencing_page.dart';\nimport 'smart_control_page.dart';\nimport 'scheduler_page.dart';\n\nclass HomePage extends StatefulWidget {\n  const HomePage({super.key});\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  final dbRef = FirebaseDatabase.instance.ref();\n\n  int _temperature = 24;\n  String _mode = 'cool';\n\n  bool _isPowerOn = false; // AC initially OFF\n\n  Map<String, dynamic> sensorData = {};\n  Map<String, dynamic> acControl = {};\n\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    Container(), // Placeholder for HomePage itself\n    GeofencingPage(),\n    SmartControlPage(),\n    SchedulerPage(),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    fetchData();\n  }\n\n  void fetchData() {\n    dbRef.child(\"sensor_data\").onValue.listen((event) {\n      final snapshot = event.snapshot;\n      if (snapshot.exists && snapshot.value != null) {\n        final data = Map<String, dynamic>.from(snapshot.value as Map);\n        setState(() {\n          sensorData = data;\n        });\n      } else {\n        setState(() {\n          sensorData = {};\n        });\n      }\n    });\n\n    dbRef.child(\"daq_data\").onValue.listen((event) {\n      final snapshot = event.snapshot;\n      if (snapshot.exists && snapshot.value != null) {\n        final daq = Map<String, dynamic>.from(snapshot.value as Map);\n        setState(() {\n          sensorData['indoor_temp'] = daq['indoor_temperature'];\n          sensorData['indoor_humidity'] = daq['indoor_humidity'];\n        });\n      }\n    });\n\n    dbRef.child(\"ac_control\").onValue.listen((event) {\n      final snapshot = event.snapshot;\n      if (snapshot.exists && snapshot.value != null) {\n        final data = Map<String, dynamic>.from(snapshot.value as Map);\n        setState(() {\n          acControl = data;\n        });\n      } else {\n        setState(() {\n          acControl = {};\n        });\n      }\n    });\n  }\n\n  void _changeTemperature(int delta) {\n    setState(() {\n      _temperature += delta;\n    });\n    _sendCommand();\n  }\n\n  void _changeMode(String mode) {\n    setState(() {\n      _mode = mode;\n    });\n    _sendCommand();\n  }\n\n  void _sendCommand() {\n    final command = \"${_mode}_${_temperature}\";\n    dbRef.child(\"ac_control/current_command\").set(command);\n  }\n\n  void _onItemTapped(int index) {\n    if (index == 0) {\n      // Toggle power\n      setState(() {\n        _isPowerOn = !_isPowerOn;\n      });\n\n      final command = _isPowerOn ? \"AC_ON\" : \"AC_OFF\";\n      dbRef.child(\"ac_control/current_command\").set(command);\n\n      _showToast(\n        _isPowerOn ? \"AC Turned ON\" : \"AC Turned OFF\",\n        _isPowerOn ? Colors.blue : Colors.red,\n      );\n\n      return;\n    }\n\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => _pages[index]),\n    );\n  }\n\n  String formatDateOnlyDate(String isoString) {\n    try {\n      DateTime dt = DateTime.parse(isoString).toLocal();\n      return DateFormat('MMM dd, yyyy').format(dt); // e.g. Jul 07, 2025\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  String formatDateOnlyTime(String isoString) {\n    try {\n      DateTime dt = DateTime.parse(isoString).toLocal();\n      return DateFormat('hh:mm a').format(dt); // e.g. 09:15 AM\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  String _formatDouble(dynamic value) {\n    if (value == null) return '--';\n    try {\n      final doubleVal =\n          value is double ? value : double.parse(value.toString());\n      return doubleVal.toStringAsFixed(1);\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  Widget _buildTempButton(IconData icon, VoidCallback onPressed) {\n    return ElevatedButton(\n      style: ElevatedButton.styleFrom(\n        shape: const CircleBorder(),\n        padding: const EdgeInsets.all(20),\n        backgroundColor: Colors.grey[850],\n      ),\n      onPressed: onPressed,\n      child: Icon(icon, size: 24, color: Colors.white),\n    );\n  }\n\n  Widget _buildModeIconButton(IconData icon, String label, String mode) {\n    final isSelected = _mode == mode;\n    return Column(\n      children: [\n        ElevatedButton(\n          style: ElevatedButton.styleFrom(\n            backgroundColor: isSelected ? Colors.blue : Colors.grey[850],\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(16),\n            ),\n            padding: const EdgeInsets.all(30),\n          ),\n          onPressed: () => _changeMode(mode),\n          child: Icon(icon, color: Colors.white, size: 30),\n        ),\n        const SizedBox(height: 8),\n        Text(label, style: TextStyle(color: Colors.white70)),\n      ],\n    );\n  }\n\n  void _showToast(String msg, MaterialColor materialColor) {\n    Fluttertoast.showToast(\n      msg: msg,\n      backgroundColor: Colors.black87,\n      textColor: Colors.white,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      body: SafeArea(\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Center(\n                child: Text(\n                  'Living Room AC',\n                  style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),\n                ),\n              ),\n              const SizedBox(height: 12),\n              Container(\n                decoration: BoxDecoration(\n                  color: Colors.grey[900],\n                  borderRadius: BorderRadius.circular(16),\n                ),\n                padding: const EdgeInsets.all(30),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"\ud83d\udcc5 ${formatDateOnlyDate(sensorData['timestamp'] ?? '__')}\",\n                          style: const TextStyle(\n                            color: Colors.white,\n                            fontSize: 18,\n                          ),\n                        ),\n                        const SizedBox(width: 16),\n                        Text(\n                          \"\u23f0 ${formatDateOnlyTime(sensorData['timestamp'] ?? '__')}\",\n                          style: const TextStyle(\n                            color: Colors.white,\n                            fontSize: 18,\n                          ),\n                        ),\n                      ],\n                    ),\n                    const SizedBox(height: 30),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Room \ud83c\udf21\ufe0f Temperature: ${_formatDouble(sensorData['indoor_temp'])}\u00b0C\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                        Text(\n                          \"\ud83d\udca7 Humidity: ${_formatDouble(sensorData['indoor_humidity'])}%\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Outside \ud83c\udf21\ufe0f Temperature: ${sensorData['outdoor_temp'] ?? '--'}\u00b0C\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                        Text(\n                          \"\ud83d\udca7 Humidity: ${sensorData['outdoor_humidity'] ?? '--'}%\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Outside \u2600\ufe0f Weather: ${sensorData['weather'] ?? '--'}\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                        Text(\n                          \"\ud83e\uddcd ${sensorData['occupancy'] ?? '--'}\",\n                          style: const TextStyle(fontSize: 13),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              const SizedBox(height: 20),\n              Center(\n                child: Column(\n                  children: [\n                    Container(\n                      width: 200,\n                      height: 200,\n                      decoration: BoxDecoration(\n                        shape: BoxShape.circle,\n                        gradient: RadialGradient(\n                          colors: [\n                            Colors.blue.withOpacity(0.3),\n                            Colors.transparent,\n                          ],\n                          center: Alignment.center,\n                          radius: 0.8,\n                        ),\n                        border: Border.all(color: Colors.blue, width: 6),\n                      ),\n                      alignment: Alignment.center,\n                      child: Text(\n                        '$_temperature\u00b0C',\n                        style: TextStyle(\n                          fontSize: 50,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.white,\n                        ),\n                      ),\n                    ),\n                    const SizedBox(height: 10),\n                    Text(\n                      _mode[0].toUpperCase() +\n                          _mode.substring(1), // Cooling, Heating, etc.\n                      style: TextStyle(\n                        color: Colors.grey[400],\n                        fontSize: 20,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n\n              const SizedBox(height: 10),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  _buildTempButton(Icons.remove, () => _changeTemperature(-1)),\n                  const SizedBox(width: 20),\n                  Text(\n                    'Set Temperature',\n                    style: TextStyle(fontSize: 16, color: Colors.white),\n                  ),\n                  const SizedBox(width: 20),\n                  _buildTempButton(Icons.add, () => _changeTemperature(1)),\n                ],\n              ),\n\n              const SizedBox(height: 20),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: [\n                  _buildModeIconButton(Icons.ac_unit, 'Cool', 'cool'),\n                  _buildModeIconButton(Icons.wb_sunny, 'Heat', 'heat'),\n                  _buildModeIconButton(Icons.air, 'Fan', 'fan'),\n                  _buildModeIconButton(Icons.opacity, 'Dry', 'dry'),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        backgroundColor: Colors.grey[900],\n        selectedItemColor: Colors.blue,\n        unselectedItemColor: Colors.white70,\n        currentIndex: _selectedIndex,\n        onTap: _onItemTapped,\n        type: BottomNavigationBarType.fixed,\n        selectedLabelStyle: const TextStyle(\n          fontSize: 12,\n          fontWeight: FontWeight.bold,\n        ),\n        unselectedLabelStyle: const TextStyle(fontSize: 12),\n        items: [\n          BottomNavigationBarItem(\n            icon: Column(\n              children: [\n                Icon(\n                  Icons.power_settings_new,\n                  size: 30,\n                  color: _isPowerOn ? Colors.blue : Colors.red,\n                ),\n                const SizedBox(height: 4),\n                Text(\n                  'Power',\n                  style: TextStyle(\n                    color: _isPowerOn ? Colors.blue : Colors.red,\n                    fontSize: 12,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              ],\n            ),\n            label: '', // suppress default label\n          ),\n          const BottomNavigationBarItem(\n            icon: Icon(Icons.location_on, size: 30),\n            label: 'Geofencing',\n          ),\n          const BottomNavigationBarItem(\n            icon: Icon(Icons.smart_toy, size: 30),\n            label: 'Smart AI',\n          ),\n          const BottomNavigationBarItem(\n            icon: Icon(Icons.schedule, size: 30),\n            label: 'Scheduler',\n          ),\n        ],\n      ),\n    );\n  }\n}\n"], "login_screen_dart": ["import 'package:flutter/material.dart';\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart';\n\nclass LoginScreen extends StatelessWidget {\n  const LoginScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Theme(\n      data: Theme.of(context).copyWith(\n        colorScheme: ColorScheme.fromSwatch().copyWith(primary: Colors.blue),\n        textButtonTheme: TextButtonThemeData(\n          style: TextButton.styleFrom(foregroundColor: Colors.blue),\n        ),\n        inputDecorationTheme: const InputDecorationTheme(\n          hintStyle: TextStyle(color: Colors.grey),\n          labelStyle: TextStyle(color: Colors.grey),\n        ),\n      ),\n      child: Scaffold(\n        body: SafeArea(\n          child: Column(\n            children: [\n              const SizedBox(height: 80),\n              const SizedBox(height: 10),\n              Image.asset(\"assests/images/icon1.png\", height: 200),\n              Expanded(\n                child: SingleChildScrollView(\n                  padding: EdgeInsets.only(\n                    bottom: MediaQuery.of(context).viewInsets.bottom,\n                  ),\n                  child: SizedBox(\n                    // Limit the max height to avoid infinite height error\n                    // or you can remove height if you want it fully scrollable\n                    height: MediaQuery.of(context).size.height * 0.55,\n                    child: SignInScreen(\n                      providers: [EmailAuthProvider()],\n                      actions: [\n                        AuthStateChangeAction<SignedIn>((context, state) {\n                          Navigator.pushReplacementNamed(context, '/home');\n                        }),\n                      ],\n                      showAuthActionSwitch: false,\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"], "scheduler_page_dart": ["import 'package:flutter/material.dart';\nimport 'package:firebase_database/firebase_database.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nclass SchedulerPage extends StatefulWidget {\n  const SchedulerPage({super.key});\n\n  @override\n  State<SchedulerPage> createState() => _SchedulerPageState();\n}\n\nclass _SchedulerPageState extends State<SchedulerPage> {\n  final dbRef = FirebaseDatabase.instance.ref();\n\n  bool scheduleEnabled = false;\n  Set<String> selectedDurations = {'1h'};\n  final List<String> availableDurations = [\n    '0.5min (30s)',\n    '30min',\n    '1h',\n    '2h',\n    '4h',\n  ];\n\n  final List<String> actions = [\"AC_ON\", \"AC_OFF\", \"cool_24\", \"cool_20\"];\n  String selectedAction = 'AC_OFF';\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeDefaults();\n  }\n\n  void _initializeDefaults() async {\n    // Set initial Firebase values\n    await dbRef.child(\"ac_control/schedule_active\").set(false);\n    await dbRef\n        .child(\"ac_control/time\")\n        .set(_calculateTotalMinutes(selectedDurations));\n\n    final snapshot = await dbRef.child('ac_control/schedule_active').get();\n    if (snapshot.exists && snapshot.value == true) {\n      await dbRef.child(\"ac_control/current_command\").set(selectedAction);\n    }\n\n    if (!mounted) return;\n    setState(() {\n      scheduleEnabled = false;\n    });\n  }\n\n  void _toggleSchedule(bool enabled) async {\n    if (!mounted) return;\n    setState(() {\n      scheduleEnabled = enabled;\n    });\n\n    dbRef.child(\"ac_control/schedule_active\").set(enabled);\n\n    if (enabled) {\n      // \u2705 Just write selectedAction directly to Firebase\n      dbRef.child(\"ac_control/current_command\").set(selectedAction);\n\n      double totalMinutes = _calculateTotalMinutes(selectedDurations);\n      dbRef.child(\"ac_control/time\").set(totalMinutes);\n\n      _showToast(\n        \"Schedule enabled: $totalMinutes min, action: $selectedAction\",\n      );\n    } else {\n      dbRef.child(\"ac_control/time\").remove();\n      _showToast(\"Schedule disabled\");\n    }\n  }\n\n  double _calculateTotalMinutes(Set<String> durations) {\n    double total = 0;\n    for (String duration in durations) {\n      if (duration == '0.5min (30s)') {\n        total += 0.5; // 30 seconds is 0.5 minutes\n      } else if (duration == '1h') {\n        total += 60;\n      } else if (duration == '2h') {\n        total += 120;\n      } else if (duration == '4h') {\n        total += 240;\n      } else if (duration == '30min') {\n        total += 30;\n      }\n    }\n    return total;\n  }\n\n  void _toggleDuration(String duration) {\n    if (!mounted) return;\n    setState(() {\n      if (selectedDurations.contains(duration)) {\n        selectedDurations.remove(duration);\n      } else {\n        selectedDurations.add(duration);\n      }\n    });\n\n    double total = _calculateTotalMinutes(selectedDurations);\n    dbRef.child(\"ac_control/time\").set(total);\n\n    if (scheduleEnabled) {\n      _showToast(\"Updated schedule time: $total min\");\n    }\n  }\n\n  void _onActionChanged(String? action) {\n    if (action != null) {\n      if (!mounted) return;\n      setState(() {\n        selectedAction = action;\n      });\n\n      if (scheduleEnabled) {\n        dbRef.child(\"ac_control/current_command\").set(action);\n        _showToast(\"Action updated: $action\");\n      }\n    }\n  }\n\n  void _showToast(String msg) {\n    Fluttertoast.showToast(\n      msg: msg,\n      backgroundColor: Colors.black87,\n      textColor: Colors.white,\n    );\n  }\n\n  Widget _buildDurationButton(String duration) {\n    final isSelected = selectedDurations.contains(duration);\n    return ChoiceChip(\n      label: Text(duration),\n      selected: isSelected,\n      onSelected: (_) => _toggleDuration(duration),\n      selectedColor: Colors.blue,\n      backgroundColor: Colors.grey[800],\n      labelStyle: const TextStyle(color: Colors.white),\n    );\n  }\n\n  @override\n  void dispose() {\n    // \u2705 Turn off the schedule automatically when leaving this page\n    dbRef.child(\"ac_control/schedule_active\").set(false);\n    dbRef.child(\"ac_control/time\").remove();\n    _showToast(\"Schedule disabled (page closed)\");\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(\n        backgroundColor: Colors.transparent,\n        title: const Text(\n          'Schedule & Timer',\n          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 28),\n        ),\n        centerTitle: true,\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                _buildCard(\n                  title: \"Schedule Toggle\",\n                  child: SwitchListTile(\n                    value: scheduleEnabled,\n                    onChanged: _toggleSchedule,\n                    title: const Text(\"Enable Schedule\"),\n                    activeColor: Colors.blue,\n                  ),\n                ),\n                const SizedBox(height: 16),\n                _buildCard(\n                  title: \"Set Timer\",\n                  child: Wrap(\n                    spacing: 10,\n                    children:\n                        availableDurations.map(_buildDurationButton).toList(),\n                  ),\n                ),\n                const SizedBox(height: 16),\n                _buildCard(\n                  title: \"Select Action\",\n                  child: DropdownButton<String>(\n                    value: selectedAction,\n                    dropdownColor: Colors.grey[900],\n                    style: const TextStyle(color: Colors.white),\n                    items:\n                        actions.map((String action) {\n                          return DropdownMenuItem<String>(\n                            value: action,\n                            child: Text(action),\n                          );\n                        }).toList(),\n                    onChanged: _onActionChanged,\n                  ),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildCard({required String title, required Widget child}) {\n    return Container(\n      width: double.infinity,\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.grey[900],\n        borderRadius: BorderRadius.circular(16),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            title,\n            style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n          ),\n          const SizedBox(height: 10),\n          child,\n        ],\n      ),\n    );\n  }\n}\n"], "smart_control_page_dart": ["import 'package:flutter/material.dart';\nimport 'package:firebase_database/firebase_database.dart';\nimport 'package:intl/intl.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nclass SmartControlPage extends StatefulWidget {\n  const SmartControlPage({super.key});\n\n  @override\n  State<SmartControlPage> createState() => _SmartControlPageState();\n}\n\nclass _SmartControlPageState extends State<SmartControlPage> {\n  final dbRef = FirebaseDatabase.instance.ref();\n\n  Map<String, dynamic> sensorData = {};\n  bool smartACControl = false;\n  bool occupancyAuto = false;\n\n  String feedback = 'comfortable';\n  String activity = 'relaxing';\n\n  @override\n  void initState() {\n    super.initState();\n    fetchSensorData();\n  }\n\n  void fetchSensorData() {\n    dbRef.onValue.listen((event) async {\n      final data = event.snapshot.value as Map?;\n      if (data == null) return;\n\n      final sensorMap = Map<String, dynamic>.from(data['sensor_data'] ?? {});\n      final daqMap = Map<String, dynamic>.from(data['daq_data'] ?? {});\n\n      final newSensorData = {\n        ...sensorMap,\n        'indoor_temp': daqMap['indoor_temperature'],\n        'indoor_humidity': daqMap['indoor_humidity'],\n      };\n\n      final String? aiTemp = newSensorData['ai_set_temp'];\n      final String? occupancy = newSensorData['occupancy'];\n\n      if (aiTemp == null || occupancy == null) {\n        setState(() => sensorData = newSensorData);\n        return;\n      }\n\n      if (occupancyAuto) {\n        if (occupancy.toLowerCase() == \"occupied\") {\n          await dbRef.child(\"ac_control/current_command\").set(aiTemp);\n        } else {\n          await dbRef.child(\"ac_control/current_command\").set(\"AC_off\");\n        }\n      } else if (smartACControl) {\n        await dbRef.child(\"ac_control/current_command\").set(aiTemp);\n      }\n\n      setState(() => sensorData = newSensorData);\n    });\n  }\n\n  void toggleSmartACControl(bool value) async {\n    setState(() {\n      smartACControl = value;\n    });\n\n    // Write the toggle state to Firebase\n    await dbRef.child(\"ac_control/smart_active\").set(value);\n\n    if (value && sensorData['ai_set_temp'] != null) {\n      await dbRef\n          .child(\"ac_control/current_command\")\n          .set(sensorData['ai_set_temp']);\n      showToast(\"Smart AC Control Enabled\");\n    } else {\n      showToast(\"Smart AC Control Disabled\");\n    }\n  }\n\n  void toggleOccupancyAuto(bool value) async {\n    setState(() {\n      occupancyAuto = value;\n    });\n\n    // Write the toggle state to Firebase\n    await dbRef.child(\"ac_control/occupancy_active\").set(value);\n\n    if (value) {\n      if (sensorData['occupancy'].toString().toLowerCase() == \"occupied\") {\n        await dbRef\n            .child(\"ac_control/current_command\")\n            .set(sensorData['ai_set_temp']);\n        showToast(\"AC Turned ON (Occupancy Detected)\");\n      } else {\n        await dbRef.child(\"ac_control/current_command\").set(\"AC_off\");\n        showToast(\"AC Turned OFF (Room Empty)\");\n      }\n    } else {\n      showToast(\"Occupancy Auto Control Disabled\");\n    }\n  }\n\n  void updateFeedback(String value) async {\n    setState(() {\n      feedback = value;\n    });\n\n    await dbRef.child(\"user_feedback/status\").set(value);\n    await dbRef\n        .child(\"user_feedback/timestamp\")\n        .set(DateTime.now().toIso8601String());\n\n    showToast(\"Feedback sent: $value\");\n  }\n\n  void updateActivity(String value) async {\n    setState(() {\n      activity = value;\n    });\n\n    await dbRef.child(\"user_feedback/activity_type\").set(value);\n    await dbRef\n        .child(\"user_feedback/timestamp\")\n        .set(DateTime.now().toIso8601String());\n\n    showToast(\"Activity updated: $value\");\n  }\n\n  void showToast(String message) {\n    Fluttertoast.showToast(\n      msg: message,\n      backgroundColor: Colors.black87,\n      textColor: Colors.white,\n      gravity: ToastGravity.BOTTOM,\n      toastLength: Toast.LENGTH_SHORT,\n    );\n  }\n\n  String formatDateOnlyDate(String isoString) {\n    try {\n      DateTime dt = DateTime.parse(isoString).toLocal();\n      return DateFormat('MMM dd, yyyy').format(dt);\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  String formatDateOnlyTime(String isoString) {\n    try {\n      DateTime dt = DateTime.parse(isoString).toLocal();\n      return DateFormat('hh:mm a').format(dt);\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  String _formatDouble(dynamic value) {\n    if (value == null) return '--';\n    try {\n      final doubleVal =\n          value is double ? value : double.parse(value.toString());\n      return doubleVal.toStringAsFixed(1);\n    } catch (_) {\n      return '--';\n    }\n  }\n\n  @override\n  void dispose() {\n    // Turn off Smart AC Control on page exit\n    smartACControl = false;\n    dbRef.child(\"ac_control/smart_active\").set(false);\n    super.dispose();\n\n    occupancyAuto = false;\n    dbRef.child(\"ac_control/occupancy_active\").set(false);\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.black,\n      appBar: AppBar(\n        title: const Text(\n          \"Smart Control\",\n          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 28),\n        ),\n        centerTitle: true,\n        backgroundColor: Colors.black,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // AI Temperature Info\n            Container(\n              decoration: BoxDecoration(\n                color: Colors.grey[900],\n                borderRadius: BorderRadius.circular(16),\n              ),\n              padding: const EdgeInsets.all(30),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  RichText(\n                    text: TextSpan(\n                      style: const TextStyle(fontSize: 18, color: Colors.white),\n                      children: [\n                        const TextSpan(text: \"AI Determined Set Temperature: \"),\n                        TextSpan(\n                          text:\n                              \"${sensorData['ai_set_temp']?.split('_')[1] ?? '--'}\u00b0C\",\n                          style: const TextStyle(\n                            color: Colors.blue,\n                            fontWeight: FontWeight.bold,\n                            fontSize: 26,\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(height: 30),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        \"\ud83d\udcc5 ${formatDateOnlyDate(sensorData['timestamp'] ?? '__')}\",\n                        style: const TextStyle(\n                          color: Colors.white,\n                          fontSize: 18,\n                        ),\n                      ),\n                      const SizedBox(width: 16),\n                      Text(\n                        \"\u23f0 ${formatDateOnlyTime(sensorData['timestamp'] ?? '__')}\",\n                        style: const TextStyle(\n                          color: Colors.white,\n                          fontSize: 18,\n                        ),\n                      ),\n                    ],\n                  ),\n                  const SizedBox(height: 30),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        \"Room \ud83c\udf21\ufe0f Temperature: ${_formatDouble(sensorData['indoor_temp'])}\u00b0C\",\n                        style: const TextStyle(fontSize: 13),\n                      ),\n                      Text(\n                        \"\ud83d\udca7 Humidity: ${_formatDouble(sensorData['indoor_humidity'])}%\",\n                        style: const TextStyle(fontSize: 13),\n                      ),\n                    ],\n                  ),\n                  Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                    children: [\n                      Text(\n                        \"Outside \ud83c\udf21\ufe0f Temperature: ${sensorData['outdoor_temp'] ?? '--'}\u00b0C\",\n                        style: const TextStyle(fontSize: 13),\n                      ),\n                      Text(\n                        \"\ud83e\uddcd ${sensorData['occupancy'] ?? '--'}\",\n                        style: const TextStyle(fontSize: 13),\n                      ),\n                    ],\n                  ),\n                ],\n              ),\n            ),\n            const SizedBox(height: 20),\n\n            // Smart AC Toggle\n            Container(\n              decoration: BoxDecoration(\n                color: Colors.grey[900],\n                borderRadius: BorderRadius.circular(16),\n              ),\n              padding: const EdgeInsets.all(20),\n              child: SwitchListTile(\n                title: const Text(\n                  \"Smart AC Control\",\n                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                ),\n                subtitle: const Text(\n                  \"AI adjusts settings for comfort and savings.\",\n                ),\n                value: smartACControl,\n                onChanged: toggleSmartACControl,\n                activeColor: Colors.blue,\n                contentPadding: EdgeInsets.zero,\n              ),\n            ),\n            const SizedBox(height: 8),\n\n            // Occupancy Auto Toggle\n            Container(\n              decoration: BoxDecoration(\n                color: Colors.grey[900],\n                borderRadius: BorderRadius.circular(16),\n              ),\n              padding: const EdgeInsets.all(20),\n              child: SwitchListTile(\n                title: const Text(\n                  \"Occupancy Auto-ON/Off\",\n                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                ),\n                subtitle: const Text(\n                  \"AC control based on occupancy detection.\",\n                ),\n                value: occupancyAuto,\n                onChanged: toggleOccupancyAuto,\n                activeColor: Colors.blue,\n                contentPadding: EdgeInsets.zero,\n              ),\n            ),\n            const SizedBox(height: 16),\n\n            // Feedback Section\n            Container(\n              decoration: BoxDecoration(\n                color: Colors.grey[900],\n                borderRadius: BorderRadius.circular(16),\n              ),\n              padding: const EdgeInsets.all(30),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  const Text(\"Feedback\", style: TextStyle(fontSize: 16)),\n                  DropdownButton<String>(\n                    value: feedback,\n                    isExpanded: true,\n                    dropdownColor: Colors.grey[850],\n                    items:\n                        ['too_hot', 'too_cold', 'comfortable']\n                            .map(\n                              (value) => DropdownMenuItem(\n                                value: value,\n                                child: Text(\n                                  value.replaceAll('_', ' ').toUpperCase(),\n                                ),\n                              ),\n                            )\n                            .toList(),\n                    onChanged: (value) {\n                      if (value != null) updateFeedback(value);\n                    },\n                  ),\n                  const SizedBox(height: 16),\n                  const Text(\n                    \"Current Activity\",\n                    style: TextStyle(fontSize: 16),\n                  ),\n                  DropdownButton<String>(\n                    value: activity,\n                    isExpanded: true,\n                    dropdownColor: Colors.grey[850],\n                    items:\n                        ['sleeping', 'working', 'relaxing', 'cooking']\n                            .map(\n                              (value) => DropdownMenuItem(\n                                value: value,\n                                child: Text(value.toUpperCase()),\n                              ),\n                            )\n                            .toList(),\n                    onChanged: (value) {\n                      if (value != null) updateActivity(value);\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"], "bottom_nav_bar_dart": ["import 'package:flutter/material.dart';\n\nclass BottomNavBar extends StatelessWidget {\n  final int currentIndex;\n  final Function(int) onTap;\n\n  const BottomNavBar({\n    super.key,\n    required this.currentIndex,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return BottomNavigationBar(\n      currentIndex: currentIndex,\n      onTap: onTap,\n      backgroundColor: const Color(0xFF0F172A),\n      selectedItemColor: const Color(0xFF1E88E5),\n      unselectedItemColor: Colors.grey,\n      items: const [\n        BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n        BottomNavigationBarItem(\n          icon: Icon(Icons.smartphone),\n          label: 'Smart Control',\n        ),\n        BottomNavigationBarItem(\n          icon: Icon(Icons.location_on),\n          label: 'Geofencing',\n        ),\n        BottomNavigationBarItem(icon: Icon(Icons.schedule), label: 'Schedule'),\n      ],\n    );\n  }\n}\n"]}, "abstractions": [{"name": "FirebaseACService", "description": "A service class responsible for centralizing all interactions with the Firebase Realtime Database concerning AC control commands, fetching sensor data, managing geofencing settings, scheduling parameters, and user feedback. It consolidates data access and modification logic from various pages.", "related_files": ["home_screen_dart", "geofencing_page_dart", "scheduler_page_dart", "smart_control_page_dart"]}, {"name": "LocationMonitoringService", "description": "Encapsulates the logic for checking and requesting location permissions, starting and stopping continuous location updates, and performing geofence calculations (e.g., distance checks). It would manage the `geolocator` package and notify about location changes or geofence entry/exit events.", "related_files": ["geofencing_page_dart"]}, {"name": "AppToastMessenger", "description": "A utility class or set of functions to provide a consistent and centralized way to display toast notifications using `Fluttertoast` across the entire application, ensuring uniform styling, duration, and gravity.", "related_files": ["home_screen_dart", "geofencing_page_dart", "scheduler_page_dart", "smart_control_page_dart"]}, {"name": "DataFormattingUtils", "description": "A collection of static utility methods for consistently formatting various data types, specifically dates, times, and double values (e.g., temperatures, humidity) into user-friendly string representations, thereby eliminating code duplication.", "related_files": ["home_screen_dart", "smart_control_page_dart"]}, {"name": "ACFeatureToggleCard", "description": "A reusable Flutter widget designed to present a feature toggle (such as Geofencing, Smart AC Control, Occupancy Auto-ON/Off, or Schedule Enable). It typically consists of a styled `Container` wrapping a `SwitchListTile` with a clear title and a descriptive subtitle.", "related_files": ["geofencing_page_dart", "smart_control_page_dart", "scheduler_page_dart"]}, {"name": "SensorDataDisplayWidget", "description": "A dedicated Flutter widget for presenting real-time environmental sensor data, including indoor/outdoor temperature, humidity, weather conditions, and occupancy status, in a structured and consistent layout.", "related_files": ["home_screen_dart", "smart_control_page_dart"]}], "relationships": [{"from_abstraction": "FirebaseACService", "to_abstraction": "AppToastMessenger", "label": "notifies via"}, {"from_abstraction": "FirebaseACService", "to_abstraction": "DataFormattingUtils", "label": "formats data with"}, {"from_abstraction": "FirebaseACService", "to_abstraction": "LocationMonitoringService", "label": "configures geofencing for"}, {"from_abstraction": "LocationMonitoringService", "to_abstraction": "FirebaseACService", "label": "updates geofence status in"}, {"from_abstraction": "LocationMonitoringService", "to_abstraction": "AppToastMessenger", "label": "shows alerts via"}, {"from_abstraction": "ACFeatureToggleCard", "to_abstraction": "FirebaseACService", "label": "modifies feature settings in"}, {"from_abstraction": "ACFeatureToggleCard", "to_abstraction": "LocationMonitoringService", "label": "controls geofencing state of"}, {"from_abstraction": "ACFeatureToggleCard", "to_abstraction": "AppToastMessenger", "label": "provides feedback via"}, {"from_abstraction": "SensorDataDisplayWidget", "to_abstraction": "FirebaseACService", "label": "requests data from"}, {"from_abstraction": "SensorDataDisplayWidget", "to_abstraction": "DataFormattingUtils", "label": "formats values using"}], "chapter_order": [{"$numberInt": "0"}, {"$numberInt": "2"}, {"$numberInt": "3"}, {"$numberInt": "1"}, {"$numberInt": "5"}, {"$numberInt": "4"}]}, "edges": ["e::68b2f368abec8b06b95a21bc"]},
{"_id": {"$oid": "68b2f326abec8b06b95a21b9"}, "name": "RepoMapper", "root": {"$oid": "000000000000000000000001"}, "access": {"all": "NO_ACCESS", "roots": {"anchors": {}}}, "archetype": {"folder_structure": ["E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\main.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\screens\\geofencing_page.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\screens\\home_screen.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\screens\\login_screen.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\screens\\scheduler_page.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\screens\\smart_control_page.dart", "E:\\GitHub_Repo\\Codebase-Genius\\Airvix-App\\lib\\widgets\\bottom_nav_bar.dart"], "summary": "The Airvix Smart AC Remote Control is a Flutter and Firebase-based Android app designed for remote AC management, offering features like geofencing, AI-driven temperature adjustments, and scheduling for automated operation. Users can control AC power, temperature, and mode, view real-time sensor data (temperature, humidity, occupancy, weather), and provide feedback for AI optimization. The app integrates with Firebase for data management and secure email-based authentication, and is part of a broader Smart-AC-Control-System project. Key technologies include Flutter for the mobile app framework, Firebase Realtime Database for data management, Firebase UI Auth for authentication, Geolocator for location-based services, Fluttertoast for notifications, Dart as the programming language, and Android Studio as the development environment. The project encourages contributions to enhance features such as energy usage analytics, advanced AI algorithms for temperature optimization, support for multiple AC units, and enhanced security. Setup involves cloning the repository, installing dependencies, and configuring Firebase. An APK download is available, and a demo video with screenshots illustrates the app's functionalities across its Login, Home, Smart Control, Geofencing, and Scheduler pages. The project is licensed under the MIT License."}, "edges": ["e::68b2f326abec8b06b95a21ba"]},
{"_id": {"$oid": "000000000000000000000001"}, "name": "", "root": null, "access": {"all": "WRITE", "roots": {"anchors": {}}}, "archetype": {}, "edges": ["e::68b2f326abec8b06b95a21ba", "e::68b2f368abec8b06b95a21bc", "e::68b2f39fabec8b06b95a21be"]}
]